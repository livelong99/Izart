[{"C:\\Users\\va112\\Documents\\Izart\\izart-web\\src\\index.js":"1","C:\\Users\\va112\\Documents\\Izart\\izart-web\\src\\App.js":"2","C:\\Users\\va112\\Documents\\Izart\\izart-web\\src\\reportWebVitals.js":"3"},{"size":478,"mtime":1612513279970,"results":"4","hashOfConfig":"5"},{"size":2502,"mtime":1612540474710,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"fw3ych",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\va112\\Documents\\Izart\\izart-web\\src\\index.js",[],["17","18"],"C:\\Users\\va112\\Documents\\Izart\\izart-web\\src\\App.js",["19"],"import './App.css';\nimport React, {useEffect, useRef, useState} from 'react';\nimport {TweenLite, Power3} from 'gsap';\n\n\nfunction App() {\n\n  const[timerDays, setTimerDays] = useState('00');\n  const[timerMinutes, setTimerMinutes] = useState('00');\n  const[timerHours, setTimerHours] = useState('00');\n  const[timerSeconds, setTimerSeconds] = useState('00');\n\n  let interval = useRef();\n\n  let timerRef = useRef(null);\n  let h1Ref = useRef(null);\n  let h2Ref = useRef(null);\n\n  const startTimer = () => {\n    console.log(\"abcd\")\n    const countdownDate = new Date('February 20, 2021 00:00:00').getTime();\n    interval = setInterval(() => {\n      const now = new Date().getTime();\n      const distance = countdownDate - now;\n\n      var days = Math.floor(distance / (1000 * 60 * 60 * 24));\n      if(days < 10){\n        days = \"0\" + String(days);\n      }\n      var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      if(hours < 10){\n        hours = \"0\" + String(hours);\n      }\n      var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n      if(minutes < 10){\n        minutes = \"0\" + minutes;\n      }\n      var seconds = Math.floor((distance % (1000 * 60)) / 1000);\n      if(seconds < 10){\n        seconds = \"0\" + seconds;\n      }\n      console.log(seconds);\n      if(distance < 0){\n\n      }\n      else{\n        setTimerDays(days);\n        setTimerHours(hours);\n        setTimerMinutes(minutes);\n        setTimerSeconds(seconds);\n      }\n    }, 1000);\n  };\n\n\n  useEffect(() => {\n    startTimer();\n    \n    TweenLite.to(\n      h1Ref,\n      0.8,\n      {\n        opacity: 1,\n        y: -40,\n        ease: Power3.easeOut,\n        delay: 0\n      }\n    )\n\n    TweenLite.to(\n      h2Ref,\n      0.8,\n      {\n        opacity: 1,\n        y: -30,\n        ease: Power3.easeOut,\n        delay: 0.3\n      }\n    )\n\n    TweenLite.to(\n      timerRef,\n      0.8,\n      {\n        opacity: 1,\n        y: -20,\n        ease: Power3.easeOut,\n        delay: 1\n      }\n    )\n\n    return () => {\n      clearInterval(interval.current);\n    }\n  });\n\n  return (\n    <header>\n    <div class=\"content\">\n      {/* <div className=\"logo\">\n        <img src=\"./logo.png\"></img>\n      </div> */}\n      <h1 ref={el => {h1Ref = el}}><span>IZ</span>ART</h1>\n      <h2 ref={el => {h2Ref = el}}>COMING SOON</h2>\n      <div\n      ref={el => {timerRef = el}}\n      class=\"countdown\">{timerDays} :  {timerHours}  : {timerMinutes}  : {timerSeconds}</div>\n    </div>\n  </header>\n  );\n}\n\nexport default App;\n","C:\\Users\\va112\\Documents\\Izart\\izart-web\\src\\reportWebVitals.js",[],["20","21"],{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":93,"column":30,"nodeType":"28","endLine":93,"endColumn":37},{"ruleId":"22","replacedBy":"29"},{"ruleId":"24","replacedBy":"30"},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"react-hooks/exhaustive-deps","The ref value 'interval.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'interval.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier",["31"],["32"],"no-global-assign","no-unsafe-negation"]